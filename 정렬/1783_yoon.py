# 병든 나이트가 도달할 수 있는 칸의 개수. (X)
# 병든 나이트가 출발점부터 막다른 곳까지 도달하기까지의 이동 횟수 중 최대인 것. (O)
# 상하로는 자유롭게 오갈 수 있지만 좌우 중에서는 항상 오른쪽으로만 이동 가능. 즉, 매 이동마다 오른쪽으로 움직임.

# 조건 1. 이동 횟수 < 4면 제약 없음. <-> 제약 없이 방문할 수 있는 최대 칸의 개수는 출발점 포함 4개.
# 조건 2. 이동 횟수 >= 4면 제약 있음. 네 가지 방법을 최소 한 번씩 이용해야 함. <-> N은 최소 3, M은 최소 7.

N, M = map(int, input().split(' '))

if N == 1:
    print(1)
elif N == 2:
    print(min(4, (M + 1) // 2))  # 조건 1
else:  # N의 최소 조건을 만족했으므로 더 이상 상하 간의 제약 X, 오른쪽으로 이동하는 것만 생각
         # M>=7부터는 제약 있음, M<7까지는 제약 없음
    if M < 7:
        print(min(4, M))
    else:  # M>=7
        print(M - 2)
